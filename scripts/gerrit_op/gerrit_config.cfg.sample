#
# 注意：
#     所有[query]里的条件，都是叠加的，请注意查询的条件！
#     请不要删除/注释任何一个选项，如果不需要，请置为空即可(像这样：BRNACH = )
#
[gerrit]
#todo, 每个项目不同，Gerrit参数不同
GERRIT_PROTOCOL = http
GERRIT_IP = 192.168.67.126
GERRIT_SUFIX = :8080
GERRIT_SSH_PORT = 29418
GERRIT_ACCOUNT = gerrit_account
#在页面上登陆后访问http://192.168.67.126:8080/#/settings/http-password
#    -> 点击'Generate Password'，则生成http的访问密码
GERRIT_HTTP_PWD = shWD6sfZtSr6

[query]
#待查询的分支名字，可以是多条，用空格分开
#BRANCHES = master TS-dev
BRANCHES = master
#待创建的新分支名(当需要创建分支时)，BRANCHES是NEW_BRANCH的基线分支(NEW_BRANCH基于BRANCHES新建)
NEW_BRANCH = new_master
#GERRIT_ID_STATUS是查询特定状态的改动(abandoned, closed, draft, merged, open, pending, reviewed)
#如为空，则默认为merged状态的改动
STATUS = merged

#如果设置了PARENTPROJECT，则会忽略PROJECTS。如果两者都设置了，则会忽略PROJECTS
#parentproject是用来定义某个项目代码的所有的父repo(可能只是控制权限的)
#最常见的parentproject是All-Projects
#只能定义一个字符串，不能用空格隔开两个
PARENTPROJECT = 8x98
#如果设置了PROJECTS。则PARENTPROJECT不生效，会设置为空
#PROJECTS是用来确定某几个具体仓库的，空格分开
#PROJECTS = tools/cmtools 8x98/manifest-8998
PROJECTS = 

#查询HTTP_QUERY_FREQUENCY时间内的改动(通过http GET方式查询的频度，可用于pull代码镜像)
#(ssh查询接口start有时不管用，而且还有limit的限制)
#如为空，则默认为5分钟, 5min, 1hour, 1day, 1week, 1month, 1year
HTTP_QUERY_FREQUENCY = 1month

#列出想要最后查询结果的项目，可以是全部，也可以是部分
# GerritID 是提交号；Branch是patch提交的分支名；Subject 是patch的标题
# Project 是patch修改的repo名字；Owner是patch的提交者；Author是patch的作者
# CommitID 是代码仓库里的SHA-1；Comments是patch的说明；Files是本次patch修改的文件列表
# Time是patch最后一次修改的时间；TotalLine是总共修改的行数；AllReviewers是所有review过patch的人
OUT_ITEMS = GerritID Branch Subject Project Owner Author CommitID Comments Files Time TotalLine AllReviewers
